const fs = require('fs')
const path = require('path')

console.log('üß™ Script de prueba para funcionalidad de upload de im√°genes')
console.log('=' .repeat(60))

// Verificar que los archivos necesarios existan
const requiredFiles = [
  'src/components/ImageUpload.jsx',
  'src/utils/cloudinary.js',
  'src/app/admin/productos/page.js'
]

console.log('\nüìÅ Verificando archivos necesarios:')
requiredFiles.forEach(file => {
  const exists = fs.existsSync(file)
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`)
})

// Verificar que las variables de entorno est√©n configuradas
console.log('\nüîë Verificando variables de entorno:')
const envFile = '.env.local'
const envExists = fs.existsSync(envFile)

if (envExists) {
  const envContent = fs.readFileSync(envFile, 'utf8')
  const hasCloudinaryName = envContent.includes('NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME')
  const hasUploadPreset = envContent.includes('NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET')
  
  console.log(`${hasCloudinaryName ? '‚úÖ' : '‚ùå'} NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME`)
  console.log(`${hasUploadPreset ? '‚úÖ' : '‚ùå'} NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET`)
} else {
  console.log('‚ùå Archivo .env.local no encontrado')
}

// Verificar dependencias instaladas
console.log('\nüì¶ Verificando dependencias:')
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
const hasCloudinary = packageJson.dependencies && packageJson.dependencies['cloudinary-react']

console.log(`${hasCloudinary ? '‚úÖ' : '‚ùå'} cloudinary-react instalado`)

// Verificar estructura del componente ImageUpload
console.log('\nüîç Verificando estructura del componente ImageUpload:')
try {
  const imageUploadContent = fs.readFileSync('src/components/ImageUpload.jsx', 'utf8')
  const hasDragDrop = imageUploadContent.includes('onDrop')
  const hasFileInput = imageUploadContent.includes('input')
  const hasUploadingState = imageUploadContent.includes('uploading')
  
  console.log(`${hasDragDrop ? '‚úÖ' : '‚ùå'} Funcionalidad drag & drop`)
  console.log(`${hasFileInput ? '‚úÖ' : '‚ùå'} Input de archivo`)
  console.log(`${hasUploadingState ? '‚úÖ' : '‚ùå'} Estado de upload`)
} catch (error) {
  console.log('‚ùå Error leyendo ImageUpload.jsx:', error.message)
}

// Verificar funci√≥n de upload a Cloudinary
console.log('\n‚òÅÔ∏è Verificando funci√≥n de upload a Cloudinary:')
try {
  const cloudinaryContent = fs.readFileSync('src/utils/cloudinary.js', 'utf8')
  const hasUploadFunction = cloudinaryContent.includes('uploadToCloudinary')
  const hasFormData = cloudinaryContent.includes('FormData')
  const hasFetch = cloudinaryContent.includes('fetch')
  
  console.log(`${hasUploadFunction ? '‚úÖ' : '‚ùå'} Funci√≥n uploadToCloudinary`)
  console.log(`${hasFormData ? '‚úÖ' : '‚ùå'} Uso de FormData`)
  console.log(`${hasFetch ? '‚úÖ' : '‚ùå'} Llamada a API de Cloudinary`)
} catch (error) {
  console.log('‚ùå Error leyendo cloudinary.js:', error.message)
}

// Verificar integraci√≥n en el modal de productos
console.log('\nüéØ Verificando integraci√≥n en modal de productos:')
try {
  const productosContent = fs.readFileSync('src/app/admin/productos/page.js', 'utf8')
  const hasImageUploadImport = productosContent.includes('import ImageUpload')
  const hasCloudinaryImport = productosContent.includes('import { uploadToCloudinary }')
  const hasImageUploadComponent = productosContent.includes('<ImageUpload')
  const hasHandleImageUpload = productosContent.includes('handleImageUpload')
  
  console.log(`${hasImageUploadImport ? '‚úÖ' : '‚ùå'} Import de ImageUpload`)
  console.log(`${hasCloudinaryImport ? '‚úÖ' : '‚ùå'} Import de uploadToCloudinary`)
  console.log(`${hasImageUploadComponent ? '‚úÖ' : '‚ùå'} Componente ImageUpload en modal`)
  console.log(`${hasHandleImageUpload ? '‚úÖ' : '‚ùå'} Funci√≥n handleImageUpload`)
} catch (error) {
  console.log('‚ùå Error leyendo productos/page.js:', error.message)
}

// Verificar ProductCard optimizado
console.log('\nüñºÔ∏è Verificando ProductCard optimizado:')
try {
  const productCardContent = fs.readFileSync('src/components/ProductCard.jsx', 'utf8')
  const hasOptimizedImageUrl = productCardContent.includes('getOptimizedImageUrl')
  const hasCloudinaryTransform = productCardContent.includes('cloudinary.com')
  
  console.log(`${hasOptimizedImageUrl ? '‚úÖ' : '‚ùå'} Funci√≥n getOptimizedImageUrl`)
  console.log(`${hasCloudinaryTransform ? '‚úÖ' : '‚ùå'} Transformaciones de Cloudinary`)
} catch (error) {
  console.log('‚ùå Error leyendo ProductCard.jsx:', error.message)
}

console.log('\n' + '=' .repeat(60))
console.log('üéâ Verificaci√≥n completada!')
console.log('\nüìã Pr√≥ximos pasos:')
console.log('1. Aseg√∫rate de que las variables de entorno est√©n configuradas')
console.log('2. Reinicia el servidor de desarrollo')
console.log('3. Prueba crear un nuevo producto con imagen')
console.log('4. Verifica que la imagen se suba a Cloudinary')
console.log('5. Confirma que se muestre correctamente en ProductCard')
