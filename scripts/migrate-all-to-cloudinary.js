const cloudinary = require('cloudinary').v2;
const fs = require('fs');
const path = require('path');

// Configuraci√≥n de Cloudinary
cloudinary.config({
  cloud_name: 'dkj7padnu',
  api_key: '141814469922666',
  api_secret: 'Iv1rDa0y177QiSfQjxBzJ0KMtaw'
});

const inputDir = path.join(process.cwd(), 'public', 'img');
const urlMappings = {};

// Funci√≥n para subir una imagen a Cloudinary
async function uploadImage(filePath, publicId) {
  try {
    console.log(`üöÄ Subiendo: ${publicId}`);
    
    const result = await cloudinary.uploader.upload(filePath, {
      public_id: publicId,
      folder: 'tnlp', // Organizar en carpeta
      resource_type: 'image',
      // Auto-optimizaci√≥n
      quality: 'auto:best',
      fetch_format: 'auto',
      // Generar responsive breakpoints
      responsive_breakpoints: {
        create_derived: true,
        bytes_step: 20000,
        min_width: 320,
        max_width: 1200,
        transformation: {
          quality: 'auto:best'
        }
      }
    });
    
    // Guardar mapeo de URL local ‚Üí URL Cloudinary
    const localPath = filePath.replace(path.join(process.cwd(), 'public'), '').replace(/\\/g, '/');
    urlMappings[localPath] = result.secure_url;
    
    console.log(`‚úÖ Subida exitosa: ${result.secure_url}`);
    return result;
    
  } catch (error) {
    console.error(`‚ùå Error subiendo ${publicId}:`, error.message);
    return null;
  }
}

// Funci√≥n recursiva para procesar directorios
async function processDirectory(dir, basePath = '') {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      // Procesar subdirectorio recursivamente
      await processDirectory(filePath, path.join(basePath, file));
    } else if (/\.(jpg|jpeg|png|webp|avif)$/i.test(file)) {
      // Procesar imagen
      const { name, ext } = path.parse(file);
      
      // Solo subir una versi√≥n por imagen (preferir WebP, luego original)
      if (ext.toLowerCase() === '.webp' || 
          (!fs.existsSync(path.join(dir, name + '.webp')) && 
           !fs.existsSync(path.join(dir, name + '.avif')))) {
        
        // Crear public_id manteniendo estructura
        const publicId = path.join(basePath, name).replace(/\\/g, '/');
        
        await uploadImage(filePath, publicId);
        
        // Peque√±a pausa para no sobrecargar la API
        await new Promise(resolve => setTimeout(resolve, 100));
      } else {
        console.log(`‚è≠Ô∏è  Saltando ${file} (ya existe versi√≥n WebP/AVIF)`);
      }
    }
  }
}

// Funci√≥n principal
async function migrateAllImages() {
  console.log('üöÄ Iniciando migraci√≥n masiva a Cloudinary...\n');
  
  try {
    // Procesar todas las im√°genes
    await processDirectory(inputDir);
    
    // Guardar mapeo de URLs para actualizar el c√≥digo
    const mappingPath = path.join(process.cwd(), 'cloudinary-url-mappings.json');
    fs.writeFileSync(mappingPath, JSON.stringify(urlMappings, null, 2));
    
    console.log('\n‚úÖ ¬°MIGRACI√ìN COMPLETADA!');
    console.log(`üìÅ Im√°genes subidas: ${Object.keys(urlMappings).length}`);
    console.log(`üìã Mapeo guardado en: ${mappingPath}`);
    console.log('\nüîó URLs de ejemplo:');
    
    // Mostrar algunas URLs de ejemplo
    Object.entries(urlMappings).slice(0, 5).forEach(([local, cloudinary]) => {
      console.log(`   ${local} ‚Üí ${cloudinary}`);
    });
    
    if (Object.keys(urlMappings).length > 5) {
      console.log(`   ... y ${Object.keys(urlMappings).length - 5} m√°s`);
    }
    
  } catch (error) {
    console.error('‚ùå Error en la migraci√≥n:', error);
  }
}

// Ejecutar migraci√≥n
migrateAllImages().catch(console.error);
